<?xml version="1.0"?>
<launch>

   <!-- LLAMAMOS AL NODO "topicAdapter" PARA CONVERTIR LA ALTURA POR SÓNAR Y EL MAGNETÓMETRO A LOS TIPOS DE DATO ADECUADOS -->
   <node name="topicAdapter" pkg="beta_bot_localization" type="topicAdapter" output="screen"/>

   <!-- LLAMAMOS AL NODO "topicAdapterControls" PARA QUE DECIDA QUÉ LOCALIZACIÓN USA EL CONTROL: GROUND TRUTH O LOCALIZACIÓN INTEGRADA. REPUBLICA EN /imu Y /state -->
   <node name="topicAdapterControls" pkg="beta_bot_localization" type="topicAdapterControls" output="screen"/>

   <!-- IMU_FILTER_MADGWICK: FUSIÓN DE IMU 6DOF + MAGNETÓMETRO PARA DAR UN MENSAJE IMU 9DOF -->
   <node name="imu_filter_node" pkg="imu_filter_madgwick" type="imu_filter_node" output="screen">
      <!-- Entradas -->
      <remap from="imu/data_raw" to="raw_imu"/>
      <!-- IMU propia -->
      <remap from="imu/mag" to="magnetic/converted"/>
      <!-- Magnetómetro con su tipo de mensaje convertido a "sensor_msgs/MagneticField" por "topicAdapter.cpp" (no admite el tipo de mensaje obsoleto) -->

      <!-- Parámetros -->
      <param name="remove_gravity_vector" value="true"/>
      <!-- Si vamos a medir la aceleración en Z, tenemos que retirar la gravedad -->
      <param name="world_frame" value="enu"/>
      <!-- En nuestros frames se usa convención ENU -->
      <param name="publish_tf" value="false"/>
      <!-- No queremos que, en la fusión, este nodo haga rotar base_link -->
      <param name="use_magnetic_field_msg" value="true"/>
      <!-- El magnetómetro publica en un topic de tipo "geometry_msgs/Vector3Stamped", que actualmente está obsoleto para magnetómetros -->
      <!-- Ponerlo a "false" hace que use este tipo de dato para el magnetómetro en lugar del nuevo tipo de dato "sensor_msgs/MagneticField" -->
      <!-- Salidas -->
      <remap from="imu/data" to="imu/data"/>
   </node>

   <!-- LOCALIZACIÓN MEDIANTE FUSIÓN SENSORIAL: robot_localization integra un EKF y un UKF -->
   <!-- EKF INCREMENTAL -->
   <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_node_incremental">
      <!-- Entradas -->
      <!-- Métodos de localización incrementales -->
      <param name="odom0" value="stereo_odometry"/>  
      <!-- Odometría visual -->
      <param name="imu0" value="imu/data/MagCorrected"/>
      <!-- IMU -->

      <rosparam param="odom0_config">[true, true, true,
                                  true, true, true,
                                  true, true, true,
                                  true, true, true,
                                  false, false, false]</rosparam>  

      <rosparam param="imu0_config">[false, false, false,
                                  true, true, true,
                                  false, false, false,
                                  true, true, true,
                                  false, false, false]</rosparam>

      <param name="odom0_relative" value="false"/> 
      <param name="odom0_differential" value="false"/> 

      <param name="imu0_relative" value="false"/>
      <param name="imu0_differential" value="false"/>

      <rosparam param="initial_state">[0.0, 0.0, 0.3,
                                    0.0, 0.0, 0.0,
                                    0.0, 0.0, 0.0,
                                    0.0, 0.0, 0.0,
                                    0.0, 0.0, 0.0]</rosparam>

      <!-- Parámetros -->
      <param name="publish_tf" value="true"/>
      <!-- Parámetro para decidir si el EKF publica o no transformaciones. Se configurará para que sí publique odom -> base_link => 'true' -->
      <param name="frequency" value="100.0"/>
      <!-- Frecuencia de publicación -->
      <param name="two_d_mode" value="false"/>
      <!-- Localización 3D -->

      <param name="map_frame" value="world"/>
      <!-- Nombre del marco de referencia fijo en nuestro simulación (equivalente a "map"): "world" -->
      <param name="odom_frame" value="nav"/>
      <!-- Nombre del marco de referencia de la odometría en nuestro simulación (equivalente a "odom"): "nav" -->
      <param name="base_link_frame" value="base_link"/>
      <param name="base_link_output_frame" value="base_link"/>
      <param name="world_frame" value="nav"/>
      <!-- Poner aquí "odom" => publica transformación odom -> base_link; poner "map" => publica transformación map -> odom -->
      <param name="predict_to_current_time" value="true"/> 
      <param name="transform_time_offset" value="0.1"/> 

      <!-- Salidas -->
      <remap from="/odometry/filtered" to="/odometry/filtered/incremental"/>
      <!-- Localización sólo con métodos incrementales (sólo predicción de un EKF) -->
      <remap from="diagnostics" to="diagnostics/incremental"/>
      <!-- Topic de diagnósticos del nodo para comprobar su funcionamiento y notificar posibles defectos -->
   </node>


   <!-- LOCALIZACIÓN MEDIANTE FUSIÓN SENSORIAL: robot_localization integra un EKF y un UKF -->
   <!-- EKF ABSOLUTO -->
   <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_node_absoluto">
      <!-- Entradas -->
      <param name="odom0" value="stereo_odometry"/>  
      <!-- Odometría Visual -->
      <param name="pose0" value="pose_height"/>
      <!-- Pose (altímetro) -->
      <param name="odom1" value="odometry/gps"/>
      <!-- Plugin GPS original o modificado -->
      <param name="imu0" value="imu/data/MagCorrected"/>
      <!-- IMU -->

      <rosparam param="odom0_config">[true, true, true,
                                   true, true, true,
                                   true, true, true,
                                   true, true, true,
                                   false, false, false]</rosparam> 

      <rosparam param="pose0_config">[false, false, true,
                                    false, false, false,
                                    false, false, false,
                                    false, false, false,
                                    false, false, false]</rosparam>

      <rosparam param="odom1_config">[true,  true,  false,
                                    false, false, false,
                                    false, false, false,
                                    false, false, false,
                                    false, false, false]</rosparam>

      <rosparam param="imu0_config">[false, false, false,
                                   true, true, true,
                                   false, false, false,
                                   true, true, true,
                                   false, false, false]</rosparam>

      <param name="odom0_relative" value="false"/> 
      <param name="pose0_relative" value="false"/>
      <param name="odom1_relative" value="false"/> 
      <param name="imu0_relative" value="false"/>

      <param name="odom0_differential" value="false"/> 
      <param name="pose0_differential" value="false"/>
      <param name="odom1_differential" value="false"/>
      <param name="imu0_differential" value="false"/>

      <rosparam param="initial_state">[0.0, 0.0, 0.3,
                                     0.0, 0.0, 0.0,
                                     0.0, 0.0, 0.0,
                                     0.0, 0.0, 0.0,
                                     0.0, 0.0, 0.0]</rosparam>
      <!-- Parámetros -->
      <param name="publish_tf" value="true"/>
      <!-- Parámetro para decidir si el EKF publica o no transformaciones. Se configurará para que sí publique odom -> base_link => 'true' -->
      <param name="frequency" value="25.0"/>    <!-- Buena combinación: incremental 100, absoluto 20 -->
      <!-- Frecuencia de publicación -->
      <param name="two_d_mode" value="false"/>
      <!-- Localización 3D -->
      <param name="predict_to_current_time" value="true"/> 
      <param name="transform_time_offset" value="0.1"/> 

      <param name="map_frame" value="world"/>
      <!-- Nombre del marco de referencia fijo en nuestro simulación (equivalente a "map"): "world" -->
      <param name="odom_frame" value="nav"/>
      <!-- Nombre del marco de referencia de la odometría en nuestro simulación (equivalente a "odom"): "nav" -->
      <param name="base_link_frame" value="base_link"/>
      <param name="base_link_output_frame" value="base_link"/>
      <param name="world_frame" value="world"/>
      <!-- Poner aquí "odom" => publica transformación odom -> base_link; poner "map" => publica transformación map -> odom -->

      <!-- Salidas -->
      <remap from="odometry/filtered" to="odometry/filtered/global"/>
      <!-- Localización con todos los métodos (incrementales y absolutos) de los que poseemos -->
      <remap from="diagnostics" to="diagnostics/global"/>
      <!-- Topic de diagnósticos del nodo para comprobar su funcionamiento y notificar posibles defectos -->
   </node>

</launch>
